package ch.bbw.zork;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	private Room currentRoom;	private Room blackmarket, marketplace, home, dungeon, blacksmith, forest, graveyard, snowyhills;	private Item blackmarketItem, marketplaceItem, dungeonItem, blacksmithItem, forestItem, graveyardItem, snowyhillsItem, homeItem;	public Game() {				parser = new Parser(System.in);		blackmarketItem = new Item("Dagger", "Poisoned Dagger", Tag.Equipable);		marketplaceItem = new Item("Bread", "2 loafs of bread", Tag.Consumable);		dungeonItem = new Item("Sword", "Well crafted Sword", Tag.Equipable);		blacksmithItem = new Item("Armor", "Steel Armor", Tag.Equipable);		forestItem = new Item("Axe", "Old Axe", Tag.Equipable);		graveyardItem = new Item("Bone", "Human Bone", Tag.Craftable);		snowyhillsItem = new Item("Goat", "Frozen Goat", Tag.Consumable);		homeItem = new Item("", "", Tag.Consumable);		blackmarket = new Room("in a sidestreet next to the market", blackmarketItem);		marketplace = new Room("a lively marketplace", marketplaceItem);		home = new Room("the entrance to the village", homeItem);		dungeon = new Room("a dungeon deep in mountains", dungeonItem);		blacksmith = new Room("a blacksmith near the marketplace", blacksmithItem);		forest = new Room("a dark forest", forestItem);		graveyard = new Room("on a foggy graveyard", graveyardItem);		snowyhills = new Room("on top of some snowy Hills", snowyhillsItem);		blackmarket.setExits(null, null, marketplace, null);		marketplace.setExits(blackmarket, home, blacksmith, null);		home.setExits(dungeon, forest, null, marketplace);		dungeon.setExits(null, null, home, null);		blacksmith.setExits(marketplace, null, null, null);		forest.setExits(graveyard, snowyhills, null, home);		graveyard.setExits(null, null, forest, null);		snowyhills.setExits(null, null, null, forest);		currentRoom = home; // start game outside	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.\n");		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);		} else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		}		return false;	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.\n");		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {			String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());				currentRoom.win();			}		}	}}